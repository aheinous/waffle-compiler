// comment

/* block comment


sdlfjs;dlfjs;
*/

a:int

a = 5

b:int = 5

a = -b 					// a = 5
                        // b = 5

c:int = 1 + 2 * 3 + 4  // c = 11

d:int = (12 - 2) * 10 / 5 // d = 20

e:int = c * d // e = 220


//f:float = 12.3

func foo():float {
    t:float = 4.0
    //t = t + 3.1
    return t
}

f:float = foo() // f = 0.3


// g:int = 100+100.0 // TODO make compile ERROR

h:float = 0.0

if 0 {
    h = 1.0
} elif f {
    h = 2.0
} else {
    h = 3.0
}				// h = 2.0


func fact(n:int):int {
    res:int = 1

    while n {
        res = res * n
        n = n - 1
    }
    return res
}




i:int = fact(5) // i = 120

func noreturn(): void {
    x:int = 44
}

//noreturn()


func sym_hide(): void {
    a:string = "no error"
}

//sym_hide()




func if_scope_test() : void {
    a:int = 1
    b:int = 1
    c:int = 1

    i:int

    while 1 {
        i:int = 0
        if a {
            i:int = 10
            a = a -1
        } elif b {
            i:int = 100
            b = 0
        } elif c {
            i:int = 1000
            return
        }
    }

}

//if_scope_test()



//i:int

while 0 {
    i:int = 0
    if a {
        i:int = 10
        a = a -1
    } elif b {
        i:int = 100
        b = 0
    } elif c {
        i:int = 1000
        //return
    }
}

func fx () : int {
    return 5
}

//s:string = fx()
