
?start: program


program: statement*

?block : "{" statement* "}"

ADDRS : "&"+

type : [ADDRS] CNAME

?statement: assign
			| decl
			| decl_init
			| if_elif
			| "while" exprn block -> while_loop
			| block
			| func
			| func_call  -> func_call_statement
			| rtn

rtn: "return" [exprn]


if_elif: "if"  exprn  block ("elif"  exprn  block)* [ "else"  block  ]

func: "func" sym "(" decl_arg_list ")" ":" type block

decl_arg_list: [ sym ":" type ("," sym ":" type)*]
// default_arg_list
call_arg_list: [ exprn ("," exprn )*]

func_call: sym "(" call_arg_list ")"

decl: sym ":" type

decl_init: sym ":" type "=" exprn

assign: sym "=" exprn




?exprn: sum
?sum: product
	| sum "+" product -> add
	| sum "-" product -> sub



?product: item
		| product "*" item -> mult
		|  product "/" item -> div

?item: SIGNED_INT -> integer
		| SIGNED_FLOAT -> floating_pt
		| sym
		| "+" item
		| "-" item -> neg
		| "(" exprn ")"
		| ESCAPED_STRING -> string
		| func_call


sym: CNAME


%import common.ESCAPED_STRING

%import common.SIGNED_FLOAT
%import common.SIGNED_INT
// %import common.SIGNED_NUMBER
%import common.CNAME
%import common.WS
%import common.C_COMMENT
%import common.CPP_COMMENT

%ignore WS
%ignore C_COMMENT
%ignore CPP_COMMENT