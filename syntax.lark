
?start: program


program: statement*

?block : "{" statement* "}"



?statement: assign ";"
			| decl ";"
			| decl_init ";"
			| if_elif
			| "while" "(" exprn ")" block -> while_loop
			| block
			| func
			| func_call ";"


if_elif: "if" "(" exprn ")" block ("elif" "(" exprn ")" block)* [ "else"  block  ]

func: "func" sym "(" ")" block

func_call: sym "(" ")"

decl: "var" sym

decl_init: "var" sym "=" exprn

assign: sym "=" exprn




?exprn: sum
?sum: product
	| sum "+" product -> add
	| sum "-" product -> sub



?product: item
		| product "*" item -> mult
		|  product "/" item -> div

?item: SIGNED_NUMBER -> num
		| sym
		| "+" item
		| "-" item -> neg
		| "(" exprn ")"
		| func_call


sym: CNAME


%import common.ESCAPED_STRING
%import common.SIGNED_NUMBER
%import common.CNAME
%import common.WS
%ignore WS
