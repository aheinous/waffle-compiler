
%import common.ESCAPED_STRING
%import common.SIGNED_FLOAT
%import common.SIGNED_INT
%import common.CNAME
%import common.WS
%import common.C_COMMENT
%import common.CPP_COMMENT

%ignore WS
%ignore C_COMMENT
%ignore CPP_COMMENT


?start: program


program: statement*

?block : "{" statement* "}"

ADDRS : "&"+

type : [ADDRS] CNAME

?statement: assign
			| class_decl
			| func
			| func_call  -> func_call_statement
			| mixin -> mixin_statement
			| "while" exprn block -> while_loop
			| if_elif
			| rtn
			| decl
			| decl_init
			| block

rtn: "return" [exprn]

class_decl: "class" sym "{" class_content "}"

class_content: class_content_item*

?class_content_item: decl_init
				| decl
				| func



_MULTILINE_STRING_INNER: /(.|\n)*?/
_MULTILINE_STRING_ESC_INNER: _MULTILINE_STRING_INNER /(?<!\\)(\\\\)*?/

ESCAPED_MULTILINE_STRING : "\"\"\"" _MULTILINE_STRING_ESC_INNER "\"\"\""


if_elif: "if"  exprn  block ("elif"  exprn  block)* [ "else"  block  ]

func: "func" sym "(" decl_arg_list ")" ":" type block

decl_arg_list: [ sym ":" type ("," sym ":" type)*]
// default_arg_list
call_arg_list: [ exprn ("," exprn )*]

func_call: sym "(" call_arg_list ")"

decl: sym ":" type

decl_init: sym ":" type "=" exprn

assign: sym "=" exprn

?mixin: "mixin" "(" exprn ")"


?exprn: or_exprn

?or_exprn: and_exprn
	| or_exprn  "or" and_exprn

?and_exprn: equal_test
	| and_exprn  "and" equal_test

?equal_test: gt_lt_test
	| equal_test "==" gt_lt_test -> eq
	| equal_test "!=" gt_lt_test -> not_eq

?gt_lt_test: sum
	| gt_lt_test ">" sum ->  gt
	| gt_lt_test ">=" sum -> gteq
	| gt_lt_test "<" sum ->  lt
	| gt_lt_test "<=" sum -> lteq

?sum: product
	| sum "+" product -> add
	| sum "-" product -> sub



?product: item
		| product "*" item -> mult
		| product "/" item -> div

?item: SIGNED_INT -> integer
		| SIGNED_FLOAT -> floating_pt
		| sym
		| "+" item
		| "-" item -> neg
		| "(" exprn ")"
		| ESCAPED_MULTILINE_STRING -> multiline_string
		| ESCAPED_STRING -> string
		| func_call
		| mixin -> mixin_exprn


sym: CNAME

